# Basic Animation Framework
import numpy as np
import cv2
import os
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from tkinter import *
right_slope, left_slope, right_int, left_int = [],[],[],[]
def init(data):
    data.margin = data.height//10
    data.isHelper = False
    data.isStatr = False 
    data.helper = []

def mousePressed(event, data):
# use event.x and event.y
    pass

def keyPressed(event, data):

    if event.keysym == "h":
        data.isHelper = True
        data.helper.append((data.width-data.margin,data.height-data.margin,
        data.margin,data.margin,'pink',data.width//2,data.height//3,
        "This is a lane detection program! \n \t         Instruction:\n"
        "1.Press 'S'in starting screen to start. \n 2.Choose the video you want to test on. \n" 
        "3. Press 'b' to go back to start menu"))

    elif event.keysym == "b":
        data.isHelper == False
        data.helper.pop()
    elif event.keysym == "s":

        def canny_detect(img):
            grayimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            blur = cv2.GaussianBlur(grayimg,(5,5),0)
            cannyimg = cv2.Canny(blur,50,10)
            return cannyimg
        def ROI(img):
            width = int(img.shape[1])
            height = int(img.shape[0])
            shape = np.array([[0, height], [width, height], [int(0.55*width), int(0.6*height)], [int(0.45*width), int(0.6*height)]])
            mask = np.zeros_like(img)

            if len(img.shape) > 2:

                channel_count = img.shape[2]
                black_mask = (255,) * channel_count
            else:
                black_mask = 255

                cv2.fillPoly(mask, np.int32([shape]), black_mask)
                masked = cv2.bitwise_and(img, mask)
                return masked

        def line_draw(img, lines, thickness=5):
            global right_slope, left_slope, right_int, left_int
            rightColor=[255,0,0]
            leftColor=[255,0,0]
            
            for line in lines:
                for x1,y1,x2,y2 in line:
                    slope = (y1-y2)/(x1-x2)
                    if slope > 3/10:
                        if x1 > 450 :
                            y_int = y2 - (slope*x2)                    
                            right_slope.append(slope)
                            right_int.append(y_int)
                        else: None                
                    elif slope < -3/10:
                        if x1 < 600:
                            y_int = y2 - (slope*x2)                    
                            left_slope.append(slope)
                            left_int.append(y_int)    
                           
            left_avg_slope = np.mean(left_slope[-20:])
            left_avg_int = np.mean(left_int[-20:])
            
            right_avg_slope = np.mean(right_slope[-20:])
            right_avg_int = np.mean(right_int[-20:])
            
            try:
                left_line_x1 = int((0.65*img.shape[0] - left_avg_int)/left_avg_slope)
                left_line_x2 = int((img.shape[0] - left_avg_int)/left_avg_slope)

                right_line_x1 = int((0.65*img.shape[0] - right_avg_int)/right_avg_slope)
                right_line_x2 = int((img.shape[0] - right_avg_int)/right_avg_slope)

                pts = np.array([[left_line_x1, int(0.65*img.shape[0])],[left_line_x2, int(img.shape[0])],[right_line_x2, int(img.shape[0])],[right_line_x1, int(0.65*img.shape[0])]], np.int32)
                pts = pts.reshape((-1,1,2))
                cv2.fillPoly(img,[pts],(0,255,0))      
                
                
                cv2.line(img, (left_line_x1, int(0.65*img.shape[0])), (left_line_x2, int(img.shape[0])), leftColor, 10)
                cv2.line(img, (right_line_x1, int(0.65*img.shape[0])), (right_line_x2, int(img.shape[0])), rightColor, 10)
            except ValueError:

                pass

                    


        def hough_lines(img):
            height = img.shape[0]
            width= img.shape[1]
            lines = cv2.HoughLinesP(img, 1, np.pi/180, 20, np.array([]), minLineLength= 20, maxLineGap=120)
            line_img = np.zeros((height, width, 3), dtype=np.uint8)
            line_draw(line_img, lines)
            return line_img



        ''' For Testing Images'''
        # image = cv2.imread("Tp_images\image6.jpg")
        # copy_image = np.copy(image)
        # canny = canny_detect(copy_image)
        # cropped_image = ROI(canny)
        # houghed = linedetect(cropped_image)
        # combined = cv2.addWeighted(image,0.8,houghed,1.0,0.0)
        # cv2.imshow('hello', combined)
        # cv2.waitKey(0)


        cap = cv2.VideoCapture("Tp_images\Test4.mp4")
        while(cap.isOpened()):
            _, frame = cap.read()
            canny = canny_detect(frame)
            cropped_image = ROI(canny)
            houghed = hough_lines(cropped_image)
            combined = cv2.addWeighted(frame,0.8,houghed,1.0,0.0)
            cv2.imshow('hello', combined)
            cv2.waitKey(1)

        
            

def redrawAll(canvas, data):
    # draw in canvas
    canvas.create_text(data.width//2, data.margin, text = "Welcome to Lane Detection!")
    canvas.create_text(data.width//2,data.margin*4, text = "Press 's' to start \nPressed 'h' for help")
    if data.isHelper == True:
        if len(data.helper) != 0:
            x1,y1,x2,y2,color,p,q,text = data.helper[0]
            canvas.create_rectangle(x1,y1,x2,y2, fill = color)
            canvas.create_text(p,q,text = text)

####################################
# use the run function as-is
####################################

def run(width=300, height=300):
    
#Things for TP3
    #pointcloud
    #car detection
    #UI improved
    #curved
    #nueral nets car detect


    def redrawAllWrapper(canvas, data):
        canvas.delete(ALL)
        canvas.create_rectangle(0, 0, data.width, data.height,
                                fill='white', width=0)
        redrawAll(canvas, data)
        canvas.update()

    def mousePressedWrapper(event, canvas, data):
        mousePressed(event, data)
        redrawAllWrapper(canvas, data)

    def keyPressedWrapper(event, canvas, data):
        keyPressed(event, data)
        redrawAllWrapper(canvas, data)

    # Set up data and call init
    class Struct(object): pass
    data = Struct()
    data.width = width
    data.height = height
    root = Tk()
    root.resizable(width=False, height=False) # prevents resizing window
    init(data)
    # create the root and the canvas
    canvas = Canvas(root, width=data.width, height=data.height)
    canvas.configure(bd=0, highlightthickness=0)
    canvas.pack()
    # set up events
    root.bind("<Button-1>", lambda event:
                            mousePressedWrapper(event, canvas, data))
    root.bind("<Key>", lambda event:
                            keyPressedWrapper(event, canvas, data))
    redrawAllWrapper(canvas, data)
    # and launch the app
    root.mainloop()  # blocks until window is closed
    print("bye!")

run(800, 600)



def canny_detect(img):
            grayimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            blur = cv2.GaussianBlur(grayimg,(5,5),0)
            cannyimg = cv2.Canny(blur,50,10)
            return cannyimg
def ROI(img):
    width = int(img.shape[1])
    height = int(img.shape[0])
    shape = np.array([[0, height], [width, height], [int(0.55*width), int(0.6*height)], [int(0.45*width), int(0.6*height)]])
    mask = np.zeros_like(img)

    if len(img.shape) > 2:
        channel_count = img.shape[2]
        black_mask = (255,) * channel_count
    else:
        black_mask = 255

    cv2.fillPoly(mask, np.int32([shape]), black_mask)
    masked = cv2.bitwise_and(img, mask)
    return masked

right_slope, left_slope, right_int, left_int = [],[],[],[]
def line_draw(img, lines, thickness=5):
    global right_slope, left_slope, right_int, left_int
    rightColor=[255,0,0]
    leftColor=[255,0,0]
    
    for line in lines:
        for x1,y1,x2,y2 in line:
            slope = (y1-y2)/(x1-x2)
            if slope > 3/10:
                if x1 > 450 :
                    y_int = y2 - (slope*x2)                    
                    right_slope.append(slope)
                    right_int.append(y_int)
                else: None                
            elif slope < -3/10:
                if x1 < 600:
                    y_int = y2 - (slope*x2)                    
                    left_slope.append(slope)
                    left_int.append(y_int)    
                   
    left_avg_slope = np.mean(left_slope[-20:])
    left_avg_int = np.mean(left_int[-20:])
    
    right_avg_slope = np.mean(right_slope[-20:])
    right_avg_int = np.mean(right_int[-20:])
    
    try:
        left_line_x1 = int((0.65*img.shape[0] - left_avg_int)/left_avg_slope)
        left_line_x2 = int((img.shape[0] - left_avg_int)/left_avg_slope)
    
        right_line_x1 = int((0.65*img.shape[0] - right_avg_int)/right_avg_slope)
        right_line_x2 = int((img.shape[0] - right_avg_int)/right_avg_slope)

        pts = np.array([[left_line_x1, int(0.65*img.shape[0])],[left_line_x2, int(img.shape[0])],[right_line_x2, int(img.shape[0])],[right_line_x1, int(0.65*img.shape[0])]], np.int32)
        pts = pts.reshape((-1,1,2))
        cv2.fillPoly(img,[pts],(0,255,0))      
        
        
        cv2.line(img, (left_line_x1, int(0.65*img.shape[0])), (left_line_x2, int(img.shape[0])), leftColor, 10)
        cv2.line(img, (right_line_x1, int(0.65*img.shape[0])), (right_line_x2, int(img.shape[0])), rightColor, 10)
    except ValueError:
    
        pass


def hough_lines(img):
    height = img.shape[0]
    width= img.shape[1]
    lines = cv2.HoughLinesP(img, 1, np.pi/180, 20, np.array([]), minLineLength= 20, maxLineGap=120)
    line_img = np.zeros((height, width, 3), dtype=np.uint8)
    line_draw(line_img, lines)
    return line_img



''' For Testing Images'''
# image = cv2.imread("Tp_images\image6.jpg")
# copy_image = np.copy(image)
# canny = canny_detect(copy_image)
# cropped_image = ROI(canny)
# houghed = linedetect(cropped_image)
# combined = cv2.addWeighted(image,0.8,houghed,1.0,0.0)
# cv2.imshow('hello', combined)
# cv2.waitKey(0)


cap = cv2.VideoCapture("Tp_images\Test4.mp4")
while(cap.isOpened()):
    _, frame = cap.read()
    canny = canny_detect(frame)
    cropped_image = ROI(canny)
    houghed = hough_lines(cropped_image)
    combined = cv2.addWeighted(frame,0.8,houghed,1.0,0.0)
    cv2.imshow('hello', combined)
    cv2.waitKey(1)